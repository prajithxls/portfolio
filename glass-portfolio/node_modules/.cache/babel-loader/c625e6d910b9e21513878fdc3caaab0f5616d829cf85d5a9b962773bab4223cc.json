{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\praji\\\\OneDrive\\\\Desktop\\\\New folder\\\\portfolio\\\\glass-portfolio\\\\src\\\\components\\\\StarsBackground.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StarsBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let stars = [];\n    let comets = [];\n    const STAR_COUNT = 200;\n    const resize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    const initStars = () => {\n      stars = Array.from({\n        length: STAR_COUNT\n      }, () => ({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        radius: Math.random() * 1.2,\n        speed: Math.random() * 0.7 + 0.5,\n        brightness: Math.random() * 0.8 + 0.2,\n        twinkleSpeed: Math.random() * 0.02 + 0.01,\n        twinklePhase: Math.random() * Math.PI * 2,\n        color: Math.random() < 0.1 ? Math.random() < 0.5 ? 'blue' : 'orange' : 'white'\n      }));\n    };\n    const spawnComet = () => {\n      if (comets.length >= 2) return;\n      const y = Math.random() * canvas.height;\n      const isRed = Math.random() < 0.2;\n      comets.push({\n        x: 0,\n        y,\n        vx: Math.random() * 2 + 2.5,\n        vy: Math.random() * 1 - 0.5,\n        length: 100,\n        opacity: 1,\n        color: isRed ? 'red' : 'white',\n        particles: []\n      });\n    };\n    const draw = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // ⭐ Draw realistic stars with twinkling and colors\n      stars.forEach(star => {\n        star.x += star.speed;\n        if (star.x > canvas.width) {\n          star.x = 0;\n          star.y = Math.random() * canvas.height;\n        }\n\n        // Update twinkle animation\n        star.twinklePhase += star.twinkleSpeed;\n        const twinkle = Math.sin(star.twinklePhase) * 0.3 + 0.7;\n        const currentBrightness = star.brightness * twinkle;\n\n        // Add slight cross-shaped diffraction spikes for brighter stars\n        if (star.radius > 0.8) {\n          ctx.beginPath();\n          ctx.strokeStyle = star.color === 'blue' ? `rgba(100, 150, 255, ${currentBrightness * 0.3})` : star.color === 'orange' ? `rgba(255, 180, 100, ${currentBrightness * 0.3})` : `rgba(255, 255, 255, ${currentBrightness * 0.3})`;\n          ctx.lineWidth = 0.5;\n\n          // Horizontal spike\n          ctx.moveTo(star.x - star.radius * 3, star.y);\n          ctx.lineTo(star.x + star.radius * 3, star.y);\n\n          // Vertical spike\n          ctx.moveTo(star.x, star.y - star.radius * 3);\n          ctx.lineTo(star.x, star.y + star.radius * 3);\n          ctx.stroke();\n        }\n\n        // Draw the star core with realistic colors\n        ctx.beginPath();\n        ctx.fillStyle = star.color === 'blue' ? `rgba(150, 200, 255, ${currentBrightness})` : star.color === 'orange' ? `rgba(255, 200, 150, ${currentBrightness})` : `rgba(255, 255, 255, ${currentBrightness})`;\n\n        // Add glow effect for larger stars\n        if (star.radius > 0.6) {\n          ctx.shadowColor = star.color === 'blue' ? `rgba(100, 150, 255, ${currentBrightness * 0.8})` : star.color === 'orange' ? `rgba(255, 180, 100, ${currentBrightness * 0.8})` : `rgba(255, 255, 255, ${currentBrightness * 0.8})`;\n          ctx.shadowBlur = star.radius * 3;\n        }\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n      });\n      comets.forEach((comet, i) => {\n        const baseColor = comet.color === 'red' ? '255, 60, 60' : '255, 255, 255';\n        const coreColor = comet.color === 'red' ? '255, 120, 120' : '255, 255, 255';\n        const segments = 8;\n        for (let seg = 0; seg < segments; seg++) {\n          const segmentRatio = seg / segments;\n          const segmentLength = comet.length * (1 - segmentRatio * 0.3);\n          const segmentWidth = 3 * (1 - segmentRatio * 0.7);\n          const gradient = ctx.createLinearGradient(comet.x - comet.vx * segmentLength * segmentRatio, comet.y - comet.vy * segmentLength * segmentRatio, comet.x - comet.vx * segmentLength, comet.y - comet.vy * segmentLength);\n          gradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity * (1 - segmentRatio * 0.5)})`);\n          gradient.addColorStop(0.5, `rgba(${baseColor}, ${comet.opacity * 0.7 * (1 - segmentRatio)})`);\n          gradient.addColorStop(1, `rgba(${baseColor}, 0)`);\n          ctx.beginPath();\n          ctx.strokeStyle = gradient;\n          ctx.lineWidth = segmentWidth;\n          ctx.lineCap = 'round';\n          ctx.moveTo(comet.x - comet.vx * segmentLength * segmentRatio, comet.y - comet.vy * segmentLength * segmentRatio);\n          ctx.lineTo(comet.x - comet.vx * segmentLength, comet.y - comet.vy * segmentLength);\n          ctx.stroke();\n        }\n        ctx.beginPath();\n        ctx.fillStyle = `rgba(${baseColor}, ${comet.opacity * 0.3})`;\n        ctx.shadowColor = `rgba(${baseColor}, ${comet.opacity * 0.8})`;\n        ctx.shadowBlur = 25;\n        ctx.arc(comet.x, comet.y, 6, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.fillStyle = `rgba(${coreColor}, ${comet.opacity * 0.8})`;\n        ctx.shadowBlur = 15;\n        ctx.arc(comet.x, comet.y, 4, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.fillStyle = `rgba(255, 255, 255, ${comet.opacity})`;\n        ctx.shadowBlur = 8;\n        ctx.arc(comet.x, comet.y, 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        if (Math.random() < 0.3) {\n          comet.particles.push({\n            x: comet.x + (Math.random() - 0.5) * 10,\n            y: comet.y + (Math.random() - 0.5) * 10,\n            vx: (Math.random() - 0.5) * 2,\n            vy: (Math.random() - 0.5) * 2,\n            life: 1,\n            decay: Math.random() * 0.02 + 0.01\n          });\n        }\n        comet.particles.forEach((particle, pi) => {\n          particle.x += particle.vx;\n          particle.y += particle.vy;\n          particle.life -= particle.decay;\n          if (particle.life > 0) {\n            ctx.beginPath();\n            ctx.fillStyle = `rgba(${baseColor}, ${particle.life * comet.opacity * 0.5})`;\n            ctx.arc(particle.x, particle.y, 1, 0, Math.PI * 2);\n            ctx.fill();\n          } else {\n            comet.particles.splice(pi, 1);\n          }\n        });\n        comet.x += comet.vx;\n        comet.y += comet.vy;\n        if (comet.x > canvas.width * 0.8) {\n          comet.opacity -= 0.008;\n        }\n        if (comet.opacity <= 0 || comet.x > canvas.width + 100) {\n          comets.splice(i, 1);\n        }\n      });\n      requestAnimationFrame(draw);\n    };\n    resize();\n    initStars();\n    draw();\n    const cometInterval = setInterval(spawnComet, 3000);\n    window.addEventListener('resize', () => {\n      resize();\n      initStars();\n    });\n    return () => {\n      window.removeEventListener('resize', resize);\n      clearInterval(cometInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed top-0 left-0 w-full h-full z-0\",\n    style: {\n      background: 'transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(StarsBackground, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = StarsBackground;\nexport default StarsBackground;\nvar _c;\n$RefreshReg$(_c, \"StarsBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","StarsBackground","_s","canvasRef","canvas","current","ctx","getContext","stars","comets","STAR_COUNT","resize","width","window","innerWidth","height","innerHeight","initStars","Array","from","length","x","Math","random","y","radius","speed","brightness","twinkleSpeed","twinklePhase","PI","color","spawnComet","isRed","push","vx","vy","opacity","particles","draw","clearRect","forEach","star","twinkle","sin","currentBrightness","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","fillStyle","shadowColor","shadowBlur","arc","fill","comet","i","baseColor","coreColor","segments","seg","segmentRatio","segmentLength","segmentWidth","gradient","createLinearGradient","addColorStop","lineCap","life","decay","particle","pi","splice","requestAnimationFrame","cometInterval","setInterval","addEventListener","removeEventListener","clearInterval","ref","className","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/praji/OneDrive/Desktop/New folder/portfolio/glass-portfolio/src/components/StarsBackground.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst StarsBackground = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    let stars = [];\r\n    let comets = [];\r\n\r\n    const STAR_COUNT = 200;\r\n\r\n    const resize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    const initStars = () => {\r\n      stars = Array.from({ length: STAR_COUNT }, () => ({\r\n        x: Math.random() * canvas.width,\r\n        y: Math.random() * canvas.height,\r\n        radius: Math.random() * 1.2,\r\n        speed: Math.random() * 0.7 + 0.5,\r\n        brightness: Math.random() * 0.8 + 0.2,\r\n        twinkleSpeed: Math.random() * 0.02 + 0.01,\r\n        twinklePhase: Math.random() * Math.PI * 2,\r\n        color: Math.random() < 0.1 ? (Math.random() < 0.5 ? 'blue' : 'orange') : 'white'\r\n      }));\r\n    };\r\n\r\n    const spawnComet = () => {\r\n      if (comets.length >= 2) return;\r\n\r\n      const y = Math.random() * canvas.height;\r\n      const isRed = Math.random() < 0.2;\r\n\r\n      comets.push({\r\n        x: 0,\r\n        y,\r\n        vx: Math.random() * 2 + 2.5,\r\n        vy: Math.random() * 1 - 0.5,\r\n        length: 100,\r\n        opacity: 1,\r\n        color: isRed ? 'red' : 'white',\r\n        particles: []\r\n      });\r\n    };\r\n\r\n    const draw = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // ⭐ Draw realistic stars with twinkling and colors\r\n      stars.forEach((star) => {\r\n        star.x += star.speed;\r\n        if (star.x > canvas.width) {\r\n          star.x = 0;\r\n          star.y = Math.random() * canvas.height;\r\n        }\r\n\r\n        // Update twinkle animation\r\n        star.twinklePhase += star.twinkleSpeed;\r\n        const twinkle = Math.sin(star.twinklePhase) * 0.3 + 0.7;\r\n        const currentBrightness = star.brightness * twinkle;\r\n\r\n        // Add slight cross-shaped diffraction spikes for brighter stars\r\n        if (star.radius > 0.8) {\r\n          ctx.beginPath();\r\n          ctx.strokeStyle = star.color === 'blue' ? `rgba(100, 150, 255, ${currentBrightness * 0.3})` :\r\n                           star.color === 'orange' ? `rgba(255, 180, 100, ${currentBrightness * 0.3})` :\r\n                           `rgba(255, 255, 255, ${currentBrightness * 0.3})`;\r\n          ctx.lineWidth = 0.5;\r\n          \r\n          // Horizontal spike\r\n          ctx.moveTo(star.x - star.radius * 3, star.y);\r\n          ctx.lineTo(star.x + star.radius * 3, star.y);\r\n          \r\n          // Vertical spike\r\n          ctx.moveTo(star.x, star.y - star.radius * 3);\r\n          ctx.lineTo(star.x, star.y + star.radius * 3);\r\n          ctx.stroke();\r\n        }\r\n\r\n        // Draw the star core with realistic colors\r\n        ctx.beginPath();\r\n        ctx.fillStyle = star.color === 'blue' ? `rgba(150, 200, 255, ${currentBrightness})` :\r\n                       star.color === 'orange' ? `rgba(255, 200, 150, ${currentBrightness})` :\r\n                       `rgba(255, 255, 255, ${currentBrightness})`;\r\n        \r\n        // Add glow effect for larger stars\r\n        if (star.radius > 0.6) {\r\n          ctx.shadowColor = star.color === 'blue' ? `rgba(100, 150, 255, ${currentBrightness * 0.8})` :\r\n                           star.color === 'orange' ? `rgba(255, 180, 100, ${currentBrightness * 0.8})` :\r\n                           `rgba(255, 255, 255, ${currentBrightness * 0.8})`;\r\n          ctx.shadowBlur = star.radius * 3;\r\n        }\r\n        \r\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.shadowBlur = 0;\r\n      });\r\n\r\n      comets.forEach((comet, i) => {\r\n        const baseColor = comet.color === 'red' ? '255, 60, 60' : '255, 255, 255';\r\n        const coreColor = comet.color === 'red' ? '255, 120, 120' : '255, 255, 255';\r\n\r\n        const segments = 8;\r\n        for (let seg = 0; seg < segments; seg++) {\r\n          const segmentRatio = seg / segments;\r\n          const segmentLength = comet.length * (1 - segmentRatio * 0.3);\r\n          const segmentWidth = 3 * (1 - segmentRatio * 0.7);\r\n          \r\n          const gradient = ctx.createLinearGradient(\r\n            comet.x - comet.vx * segmentLength * segmentRatio,\r\n            comet.y - comet.vy * segmentLength * segmentRatio,\r\n            comet.x - comet.vx * segmentLength,\r\n            comet.y - comet.vy * segmentLength\r\n          );\r\n          \r\n          gradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity * (1 - segmentRatio * 0.5)})`);\r\n          gradient.addColorStop(0.5, `rgba(${baseColor}, ${comet.opacity * 0.7 * (1 - segmentRatio)})`);\r\n          gradient.addColorStop(1, `rgba(${baseColor}, 0)`);\r\n\r\n          ctx.beginPath();\r\n          ctx.strokeStyle = gradient;\r\n          ctx.lineWidth = segmentWidth;\r\n          ctx.lineCap = 'round';\r\n          ctx.moveTo(\r\n            comet.x - comet.vx * segmentLength * segmentRatio,\r\n            comet.y - comet.vy * segmentLength * segmentRatio\r\n          );\r\n          ctx.lineTo(\r\n            comet.x - comet.vx * segmentLength,\r\n            comet.y - comet.vy * segmentLength\r\n          );\r\n          ctx.stroke();\r\n        }\r\n\r\n     \r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(${baseColor}, ${comet.opacity * 0.3})`;\r\n        ctx.shadowColor = `rgba(${baseColor}, ${comet.opacity * 0.8})`;\r\n        ctx.shadowBlur = 25;\r\n        ctx.arc(comet.x, comet.y, 6, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n     \r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(${coreColor}, ${comet.opacity * 0.8})`;\r\n        ctx.shadowBlur = 15;\r\n        ctx.arc(comet.x, comet.y, 4, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n       \r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(255, 255, 255, ${comet.opacity})`;\r\n        ctx.shadowBlur = 8;\r\n        ctx.arc(comet.x, comet.y, 2, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        ctx.shadowBlur = 0;\r\n\r\n        if (Math.random() < 0.3) {\r\n          comet.particles.push({\r\n            x: comet.x + (Math.random() - 0.5) * 10,\r\n            y: comet.y + (Math.random() - 0.5) * 10,\r\n            vx: (Math.random() - 0.5) * 2,\r\n            vy: (Math.random() - 0.5) * 2,\r\n            life: 1,\r\n            decay: Math.random() * 0.02 + 0.01\r\n          });\r\n        }\r\n\r\n        comet.particles.forEach((particle, pi) => {\r\n          particle.x += particle.vx;\r\n          particle.y += particle.vy;\r\n          particle.life -= particle.decay;\r\n          \r\n          if (particle.life > 0) {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = `rgba(${baseColor}, ${particle.life * comet.opacity * 0.5})`;\r\n            ctx.arc(particle.x, particle.y, 1, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          } else {\r\n            comet.particles.splice(pi, 1);\r\n          }\r\n        });\r\n\r\n        comet.x += comet.vx;\r\n        comet.y += comet.vy;\r\n\r\n        if (comet.x > canvas.width * 0.8) {\r\n          comet.opacity -= 0.008;\r\n        }\r\n\r\n        if (comet.opacity <= 0 || comet.x > canvas.width + 100) {\r\n          comets.splice(i, 1);\r\n        }\r\n      });\r\n\r\n      requestAnimationFrame(draw);\r\n    };\r\n\r\n    resize();\r\n    initStars();\r\n    draw();\r\n\r\n    const cometInterval = setInterval(spawnComet, 3000);\r\n\r\n    window.addEventListener('resize', () => {\r\n      resize();\r\n      initStars();\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', resize);\r\n      clearInterval(cometInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full z-0\"\r\n      style={{ background: 'transparent' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StarsBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}