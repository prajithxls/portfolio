{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\praji\\\\OneDrive\\\\Desktop\\\\New folder\\\\portfolio\\\\glass-portfolio\\\\src\\\\components\\\\StarsBackground.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StarsBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let stars = [];\n    let comets = [];\n    let nebulaClouds = [];\n    let shootingStars = [];\n    const STAR_COUNT = 200;\n    const resize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    const initStars = () => {\n      stars = Array.from({\n        length: STAR_COUNT\n      }, () => {\n        const size = Math.random();\n        const starType = size > 0.7 ? 'giant' : size > 0.4 ? 'medium' : 'dwarf';\n        return {\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          radius: starType === 'giant' ? Math.random() * 2 + 1.5 : starType === 'medium' ? Math.random() * 1.2 + 0.8 : Math.random() * 0.8 + 0.3,\n          speed: Math.random() * 0.7 + 0.5,\n          brightness: Math.random() * 0.9 + 0.1,\n          twinkleSpeed: Math.random() * 0.05 + 0.02,\n          twinklePhase: Math.random() * Math.PI * 2,\n          pulsePhase: Math.random() * Math.PI * 2,\n          color: Math.random() < 0.05 ? 'red' : Math.random() < 0.15 ? 'blue' : Math.random() < 0.25 ? 'orange' : Math.random() < 0.35 ? 'yellow' : 'white',\n          type: starType,\n          coronaSize: Math.random() * 20 + 10\n        };\n      });\n\n      // Add some nebula clouds\n      nebulaClouds = Array.from({\n        length: 3\n      }, () => ({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        size: Math.random() * 300 + 200,\n        opacity: Math.random() * 0.1 + 0.05,\n        speed: Math.random() * 0.2 + 0.1,\n        color: Math.random() < 0.5 ? 'purple' : 'blue',\n        drift: Math.random() * 0.5 - 0.25\n      }));\n    };\n    const spawnComet = () => {\n      if (comets.length >= 2) return;\n      const y = Math.random() * canvas.height;\n      const isRed = Math.random() < 0.2;\n      const isLarge = Math.random() < 0.3;\n      comets.push({\n        x: -50,\n        y,\n        vx: Math.random() * 3 + 3,\n        vy: Math.random() * 2 - 1,\n        length: isLarge ? 150 : 100,\n        opacity: 1,\n        color: isRed ? 'red' : 'white',\n        particles: [],\n        sparkles: [],\n        size: isLarge ? 8 : 5,\n        intensity: isLarge ? 1.5 : 1,\n        rotation: 0,\n        spiralParticles: []\n      });\n    };\n    const spawnShootingStar = () => {\n      if (Math.random() < 0.98) return;\n      const startSide = Math.random() < 0.5;\n      shootingStars.push({\n        x: startSide ? -20 : canvas.width + 20,\n        y: Math.random() * canvas.height * 0.6,\n        vx: startSide ? Math.random() * 8 + 12 : -(Math.random() * 8 + 12),\n        vy: Math.random() * 4 - 2,\n        life: 1,\n        trail: [],\n        color: Math.random() < 0.3 ? 'gold' : 'white'\n      });\n    };\n    const draw = () => {\n      // Create deep space background with subtle gradient\n      const bgGradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height));\n      bgGradient.addColorStop(0, 'rgba(5, 5, 20, 0.1)');\n      bgGradient.addColorStop(1, 'rgba(0, 0, 0, 0.1)');\n      ctx.fillStyle = bgGradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw nebula clouds\n      nebulaClouds.forEach(cloud => {\n        cloud.x += cloud.speed;\n        cloud.y += cloud.drift;\n        if (cloud.x > canvas.width + cloud.size) {\n          cloud.x = -cloud.size;\n          cloud.y = Math.random() * canvas.height;\n        }\n        const cloudGradient = ctx.createRadialGradient(cloud.x, cloud.y, 0, cloud.x, cloud.y, cloud.size);\n        if (cloud.color === 'purple') {\n          cloudGradient.addColorStop(0, `rgba(138, 43, 226, ${cloud.opacity})`);\n          cloudGradient.addColorStop(0.5, `rgba(75, 0, 130, ${cloud.opacity * 0.5})`);\n          cloudGradient.addColorStop(1, 'rgba(138, 43, 226, 0)');\n        } else {\n          cloudGradient.addColorStop(0, `rgba(0, 100, 200, ${cloud.opacity})`);\n          cloudGradient.addColorStop(0.5, `rgba(0, 50, 150, ${cloud.opacity * 0.5})`);\n          cloudGradient.addColorStop(1, 'rgba(0, 100, 200, 0)');\n        }\n        ctx.fillStyle = cloudGradient;\n        ctx.fillRect(cloud.x - cloud.size, cloud.y - cloud.size, cloud.size * 2, cloud.size * 2);\n      });\n\n      // ⭐ Draw ultra-realistic stars\n      stars.forEach(star => {\n        star.x += star.speed;\n        if (star.x > canvas.width + 50) {\n          star.x = -50;\n          star.y = Math.random() * canvas.height;\n        }\n        star.twinklePhase += star.twinkleSpeed;\n        star.pulsePhase += 0.01;\n        const twinkle = Math.sin(star.twinklePhase) * 0.4 + 0.6;\n        const pulse = Math.sin(star.pulsePhase) * 0.2 + 0.8;\n        const currentBrightness = star.brightness * twinkle * pulse;\n\n        // Star colors with realistic temperature mapping\n        let starColor, coreColor, glowColor;\n        switch (star.color) {\n          case 'red':\n            starColor = `255, 100, 80`;\n            coreColor = `255, 180, 150`;\n            glowColor = `255, 60, 40`;\n            break;\n          case 'blue':\n            starColor = `100, 150, 255`;\n            coreColor = `200, 220, 255`;\n            glowColor = `80, 120, 255`;\n            break;\n          case 'orange':\n            starColor = `255, 180, 80`;\n            coreColor = `255, 220, 180`;\n            glowColor = `255, 140, 60`;\n            break;\n          case 'yellow':\n            starColor = `255, 240, 150`;\n            coreColor = `255, 255, 220`;\n            glowColor = `255, 200, 100`;\n            break;\n          default:\n            starColor = `255, 255, 255`;\n            coreColor = `255, 255, 255`;\n            glowColor = `200, 220, 255`;\n        }\n\n        // Giant stars get corona effects\n        if (star.type === 'giant') {\n          const coronaGradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, star.coronaSize);\n          coronaGradient.addColorStop(0, `rgba(${glowColor}, ${currentBrightness * 0.1})`);\n          coronaGradient.addColorStop(0.7, `rgba(${glowColor}, ${currentBrightness * 0.05})`);\n          coronaGradient.addColorStop(1, `rgba(${glowColor}, 0)`);\n          ctx.fillStyle = coronaGradient;\n          ctx.fillRect(star.x - star.coronaSize, star.y - star.coronaSize, star.coronaSize * 2, star.coronaSize * 2);\n        }\n\n        // Diffraction spikes for bright stars\n        if (star.radius > 1) {\n          ctx.strokeStyle = `rgba(${starColor}, ${currentBrightness * 0.6})`;\n          ctx.lineWidth = 0.8;\n          ctx.beginPath();\n\n          // Main cross spikes\n          const spikeLength = star.radius * 8;\n          ctx.moveTo(star.x - spikeLength, star.y);\n          ctx.lineTo(star.x + spikeLength, star.y);\n          ctx.moveTo(star.x, star.y - spikeLength);\n          ctx.lineTo(star.x, star.y + spikeLength);\n\n          // Diagonal spikes for giants\n          if (star.type === 'giant') {\n            const diagLength = spikeLength * 0.6;\n            ctx.moveTo(star.x - diagLength, star.y - diagLength);\n            ctx.lineTo(star.x + diagLength, star.y + diagLength);\n            ctx.moveTo(star.x - diagLength, star.y + diagLength);\n            ctx.lineTo(star.x + diagLength, star.y - diagLength);\n          }\n          ctx.stroke();\n        }\n\n        // Multi-layer star rendering\n        // Outer glow\n        ctx.shadowColor = `rgba(${glowColor}, ${currentBrightness})`;\n        ctx.shadowBlur = star.radius * 6;\n        ctx.fillStyle = `rgba(${starColor}, ${currentBrightness * 0.8})`;\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.radius * 1.5, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Core\n        ctx.shadowBlur = star.radius * 3;\n        ctx.fillStyle = `rgba(${coreColor}, ${currentBrightness})`;\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Bright center\n        ctx.shadowBlur = 0;\n        ctx.fillStyle = `rgba(255, 255, 255, ${currentBrightness * 0.9})`;\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.radius * 0.3, 0, Math.PI * 2);\n        ctx.fill();\n      });\n\n      // ☄️ Draw spectacular comets\n      comets.forEach((comet, i) => {\n        const baseColor = comet.color === 'red' ? '255, 60, 40' : '100, 200, 255';\n        const coreColor = comet.color === 'red' ? '255, 120, 100' : '200, 240, 255';\n        comet.rotation += 0.1;\n\n        // Create coma (gas cloud around nucleus)\n        const comaGradient = ctx.createRadialGradient(comet.x, comet.y, 0, comet.x, comet.y, comet.size * 4);\n        comaGradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity * 0.3})`);\n        comaGradient.addColorStop(0.5, `rgba(${baseColor}, ${comet.opacity * 0.1})`);\n        comaGradient.addColorStop(1, `rgba(${baseColor}, 0)`);\n        ctx.fillStyle = comaGradient;\n        ctx.fillRect(comet.x - comet.size * 4, comet.y - comet.size * 4, comet.size * 8, comet.size * 8);\n\n        // Multiple tail types\n        const tailCount = 5;\n        for (let t = 0; t < tailCount; t++) {\n          const tailOffset = (t - 2) * 15;\n          const tailLength = comet.length * (1 - t * 0.15);\n\n          // Ion tail (straight)\n          if (t === 0) {\n            const ionGradient = ctx.createLinearGradient(comet.x, comet.y, comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength);\n            ionGradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity})`);\n            ionGradient.addColorStop(0.3, `rgba(${baseColor}, ${comet.opacity * 0.8})`);\n            ionGradient.addColorStop(1, `rgba(${baseColor}, 0)`);\n            ctx.strokeStyle = ionGradient;\n            ctx.lineWidth = 6;\n            ctx.beginPath();\n            ctx.moveTo(comet.x, comet.y);\n            ctx.lineTo(comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength);\n            ctx.stroke();\n          }\n\n          // Dust tails (curved)\n          const curvature = Math.sin(comet.rotation + t) * 0.3;\n          const dustGradient = ctx.createLinearGradient(comet.x, comet.y + tailOffset, comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength + tailOffset + curvature * 50);\n          dustGradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity * 0.7})`);\n          dustGradient.addColorStop(0.5, `rgba(${baseColor}, ${comet.opacity * 0.4})`);\n          dustGradient.addColorStop(1, `rgba(${baseColor}, 0)`);\n          ctx.strokeStyle = dustGradient;\n          ctx.lineWidth = 4 - t * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(comet.x, comet.y + tailOffset);\n          ctx.quadraticCurveTo(comet.x - comet.vx * tailLength * 0.5, comet.y - comet.vy * tailLength * 0.5 + tailOffset + curvature * 25, comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength + tailOffset + curvature * 50);\n          ctx.stroke();\n        }\n\n        // Spiral particle jets\n        for (let j = 0; j < 8; j++) {\n          const angle = comet.rotation + j * Math.PI / 4;\n          const jetLength = 30;\n          const jetX = comet.x + Math.cos(angle) * jetLength;\n          const jetY = comet.y + Math.sin(angle) * jetLength;\n          if (Math.random() < 0.4) {\n            comet.spiralParticles.push({\n              x: jetX,\n              y: jetY,\n              vx: Math.cos(angle) * 2 + comet.vx * 0.5,\n              vy: Math.sin(angle) * 2 + comet.vy * 0.5,\n              life: 1,\n              decay: 0.02,\n              size: Math.random() * 2 + 1\n            });\n          }\n        }\n\n        // Enhanced particle systems\n        if (Math.random() < 0.7) {\n          for (let p = 0; p < 3; p++) {\n            comet.particles.push({\n              x: comet.x + (Math.random() - 0.5) * 20,\n              y: comet.y + (Math.random() - 0.5) * 20,\n              vx: (Math.random() - 0.5) * 4 - comet.vx * 0.3,\n              vy: (Math.random() - 0.5) * 4 - comet.vy * 0.3,\n              life: 1,\n              decay: Math.random() * 0.03 + 0.01,\n              size: Math.random() * 3 + 1\n            });\n          }\n        }\n\n        // Sparkle effects\n        if (Math.random() < 0.5) {\n          comet.sparkles.push({\n            x: comet.x + (Math.random() - 0.5) * 15,\n            y: comet.y + (Math.random() - 0.5) * 15,\n            life: 1,\n            decay: 0.1,\n            brightness: Math.random()\n          });\n        }\n\n        // Draw all particles\n        [...comet.particles, ...comet.spiralParticles].forEach((particle, pi) => {\n          particle.x += particle.vx;\n          particle.y += particle.vy;\n          particle.life -= particle.decay;\n          particle.vx *= 0.99;\n          particle.vy *= 0.99;\n          if (particle.life > 0) {\n            ctx.shadowColor = `rgba(${baseColor}, ${particle.life})`;\n            ctx.shadowBlur = particle.size * 2;\n            ctx.fillStyle = `rgba(${baseColor}, ${particle.life * comet.opacity})`;\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        });\n\n        // Draw sparkles\n        comet.sparkles.forEach((sparkle, si) => {\n          sparkle.life -= sparkle.decay;\n          if (sparkle.life > 0) {\n            ctx.strokeStyle = `rgba(255, 255, 255, ${sparkle.life * sparkle.brightness})`;\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(sparkle.x - 5, sparkle.y);\n            ctx.lineTo(sparkle.x + 5, sparkle.y);\n            ctx.moveTo(sparkle.x, sparkle.y - 5);\n            ctx.lineTo(sparkle.x, sparkle.y + 5);\n            ctx.stroke();\n          }\n        });\n\n        // Filter out dead particles\n        comet.particles = comet.particles.filter(p => p.life > 0);\n        comet.spiralParticles = comet.spiralParticles.filter(p => p.life > 0);\n        comet.sparkles = comet.sparkles.filter(s => s.life > 0);\n\n        // Ultra-detailed nucleus\n        // Outer atmosphere\n        ctx.shadowColor = `rgba(${baseColor}, ${comet.opacity})`;\n        ctx.shadowBlur = 30;\n        ctx.fillStyle = `rgba(${baseColor}, ${comet.opacity * 0.3})`;\n        ctx.beginPath();\n        ctx.arc(comet.x, comet.y, comet.size * 2, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Middle layer\n        ctx.shadowBlur = 20;\n        ctx.fillStyle = `rgba(${coreColor}, ${comet.opacity * 0.8})`;\n        ctx.beginPath();\n        ctx.arc(comet.x, comet.y, comet.size * 1.2, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Core\n        ctx.shadowBlur = 15;\n        ctx.fillStyle = `rgba(255, 255, 255, ${comet.opacity})`;\n        ctx.beginPath();\n        ctx.arc(comet.x, comet.y, comet.size * 0.6, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Bright center\n        ctx.shadowBlur = 8;\n        ctx.fillStyle = `rgba(255, 255, 255, ${comet.opacity})`;\n        ctx.beginPath();\n        ctx.arc(comet.x, comet.y, comet.size * 0.3, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        comet.x += comet.vx;\n        comet.y += comet.vy;\n        if (comet.x > canvas.width * 0.8) {\n          comet.opacity -= 0.008;\n        }\n        if (comet.opacity <= 0 || comet.x > canvas.width + 200) {\n          comets.splice(i, 1);\n        }\n      });\n\n      // ⭐ Draw shooting stars\n      shootingStars.forEach((star, i) => {\n        star.trail.push({\n          x: star.x,\n          y: star.y,\n          life: 1\n        });\n        if (star.trail.length > 15) star.trail.shift();\n\n        // Draw trail\n        star.trail.forEach((point, pi) => {\n          point.life -= 0.1;\n          if (point.life > 0) {\n            const trailColor = star.color === 'gold' ? '255, 215, 0' : '255, 255, 255';\n            ctx.shadowColor = `rgba(${trailColor}, ${point.life})`;\n            ctx.shadowBlur = 5;\n            ctx.fillStyle = `rgba(${trailColor}, ${point.life * 0.8})`;\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 2 * point.life, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        });\n\n        // Draw shooting star\n        const shootingColor = star.color === 'gold' ? '255, 215, 0' : '255, 255, 255';\n        ctx.shadowColor = `rgba(${shootingColor}, ${star.life})`;\n        ctx.shadowBlur = 15;\n        ctx.fillStyle = `rgba(${shootingColor}, ${star.life})`;\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, 3, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        star.x += star.vx;\n        star.y += star.vy;\n        star.life -= 0.02;\n        if (star.life <= 0 || star.x < -50 || star.x > canvas.width + 50) {\n          shootingStars.splice(i, 1);\n        }\n      });\n      spawnShootingStar();\n      requestAnimationFrame(draw);\n    };\n    resize();\n    initStars();\n    draw();\n    const cometInterval = setInterval(spawnComet, 3000);\n    window.addEventListener('resize', () => {\n      resize();\n      initStars();\n    });\n    return () => {\n      window.removeEventListener('resize', resize);\n      clearInterval(cometInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed top-0 left-0 w-full h-full z-0\",\n    style: {\n      background: 'transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 500,\n    columnNumber: 5\n  }, this);\n};\n_s(StarsBackground, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = StarsBackground;\nexport default StarsBackground;\nvar _c;\n$RefreshReg$(_c, \"StarsBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","StarsBackground","_s","canvasRef","canvas","current","ctx","getContext","stars","comets","nebulaClouds","shootingStars","STAR_COUNT","resize","width","window","innerWidth","height","innerHeight","initStars","Array","from","length","size","Math","random","starType","x","y","radius","speed","brightness","twinkleSpeed","twinklePhase","PI","pulsePhase","color","type","coronaSize","opacity","drift","spawnComet","isRed","isLarge","push","vx","vy","particles","sparkles","intensity","rotation","spiralParticles","spawnShootingStar","startSide","life","trail","draw","bgGradient","createRadialGradient","max","addColorStop","fillStyle","fillRect","forEach","cloud","cloudGradient","star","twinkle","sin","pulse","currentBrightness","starColor","coreColor","glowColor","coronaGradient","strokeStyle","lineWidth","beginPath","spikeLength","moveTo","lineTo","diagLength","stroke","shadowColor","shadowBlur","arc","fill","comet","i","baseColor","comaGradient","tailCount","t","tailOffset","tailLength","ionGradient","createLinearGradient","curvature","dustGradient","quadraticCurveTo","j","angle","jetLength","jetX","cos","jetY","decay","p","particle","pi","sparkle","si","filter","s","splice","shift","point","trailColor","shootingColor","requestAnimationFrame","cometInterval","setInterval","addEventListener","removeEventListener","clearInterval","ref","className","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/praji/OneDrive/Desktop/New folder/portfolio/glass-portfolio/src/components/StarsBackground.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst StarsBackground = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    let stars = [];\r\n    let comets = [];\r\n    let nebulaClouds = [];\r\n    let shootingStars = [];\r\n\r\n    const STAR_COUNT = 200;\r\n\r\n    const resize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    const initStars = () => {\r\n      stars = Array.from({ length: STAR_COUNT }, () => {\r\n        const size = Math.random();\r\n        const starType = size > 0.7 ? 'giant' : size > 0.4 ? 'medium' : 'dwarf';\r\n        \r\n        return {\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          radius: starType === 'giant' ? Math.random() * 2 + 1.5 : \r\n                  starType === 'medium' ? Math.random() * 1.2 + 0.8 : \r\n                  Math.random() * 0.8 + 0.3,\r\n          speed: Math.random() * 0.7 + 0.5,\r\n          brightness: Math.random() * 0.9 + 0.1,\r\n          twinkleSpeed: Math.random() * 0.05 + 0.02,\r\n          twinklePhase: Math.random() * Math.PI * 2,\r\n          pulsePhase: Math.random() * Math.PI * 2,\r\n          color: Math.random() < 0.05 ? 'red' :\r\n                 Math.random() < 0.15 ? 'blue' :\r\n                 Math.random() < 0.25 ? 'orange' :\r\n                 Math.random() < 0.35 ? 'yellow' : 'white',\r\n          type: starType,\r\n          coronaSize: Math.random() * 20 + 10\r\n        };\r\n      });\r\n\r\n      // Add some nebula clouds\r\n      nebulaClouds = Array.from({ length: 3 }, () => ({\r\n        x: Math.random() * canvas.width,\r\n        y: Math.random() * canvas.height,\r\n        size: Math.random() * 300 + 200,\r\n        opacity: Math.random() * 0.1 + 0.05,\r\n        speed: Math.random() * 0.2 + 0.1,\r\n        color: Math.random() < 0.5 ? 'purple' : 'blue',\r\n        drift: Math.random() * 0.5 - 0.25\r\n      }));\r\n    };\r\n\r\n    const spawnComet = () => {\r\n      if (comets.length >= 2) return;\r\n\r\n      const y = Math.random() * canvas.height;\r\n      const isRed = Math.random() < 0.2;\r\n      const isLarge = Math.random() < 0.3;\r\n\r\n      comets.push({\r\n        x: -50,\r\n        y,\r\n        vx: Math.random() * 3 + 3,\r\n        vy: Math.random() * 2 - 1,\r\n        length: isLarge ? 150 : 100,\r\n        opacity: 1,\r\n        color: isRed ? 'red' : 'white',\r\n        particles: [],\r\n        sparkles: [],\r\n        size: isLarge ? 8 : 5,\r\n        intensity: isLarge ? 1.5 : 1,\r\n        rotation: 0,\r\n        spiralParticles: []\r\n      });\r\n    };\r\n\r\n    const spawnShootingStar = () => {\r\n      if (Math.random() < 0.98) return;\r\n\r\n      const startSide = Math.random() < 0.5;\r\n      shootingStars.push({\r\n        x: startSide ? -20 : canvas.width + 20,\r\n        y: Math.random() * canvas.height * 0.6,\r\n        vx: startSide ? Math.random() * 8 + 12 : -(Math.random() * 8 + 12),\r\n        vy: Math.random() * 4 - 2,\r\n        life: 1,\r\n        trail: [],\r\n        color: Math.random() < 0.3 ? 'gold' : 'white'\r\n      });\r\n    };\r\n\r\n    const draw = () => {\r\n      // Create deep space background with subtle gradient\r\n      const bgGradient = ctx.createRadialGradient(\r\n        canvas.width / 2, canvas.height / 2, 0,\r\n        canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height)\r\n      );\r\n      bgGradient.addColorStop(0, 'rgba(5, 5, 20, 0.1)');\r\n      bgGradient.addColorStop(1, 'rgba(0, 0, 0, 0.1)');\r\n      ctx.fillStyle = bgGradient;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw nebula clouds\r\n      nebulaClouds.forEach(cloud => {\r\n        cloud.x += cloud.speed;\r\n        cloud.y += cloud.drift;\r\n        \r\n        if (cloud.x > canvas.width + cloud.size) {\r\n          cloud.x = -cloud.size;\r\n          cloud.y = Math.random() * canvas.height;\r\n        }\r\n\r\n        const cloudGradient = ctx.createRadialGradient(\r\n          cloud.x, cloud.y, 0,\r\n          cloud.x, cloud.y, cloud.size\r\n        );\r\n        \r\n        if (cloud.color === 'purple') {\r\n          cloudGradient.addColorStop(0, `rgba(138, 43, 226, ${cloud.opacity})`);\r\n          cloudGradient.addColorStop(0.5, `rgba(75, 0, 130, ${cloud.opacity * 0.5})`);\r\n          cloudGradient.addColorStop(1, 'rgba(138, 43, 226, 0)');\r\n        } else {\r\n          cloudGradient.addColorStop(0, `rgba(0, 100, 200, ${cloud.opacity})`);\r\n          cloudGradient.addColorStop(0.5, `rgba(0, 50, 150, ${cloud.opacity * 0.5})`);\r\n          cloudGradient.addColorStop(1, 'rgba(0, 100, 200, 0)');\r\n        }\r\n\r\n        ctx.fillStyle = cloudGradient;\r\n        ctx.fillRect(cloud.x - cloud.size, cloud.y - cloud.size, cloud.size * 2, cloud.size * 2);\r\n      });\r\n\r\n      // ⭐ Draw ultra-realistic stars\r\n      stars.forEach((star) => {\r\n        star.x += star.speed;\r\n        if (star.x > canvas.width + 50) {\r\n          star.x = -50;\r\n          star.y = Math.random() * canvas.height;\r\n        }\r\n\r\n        star.twinklePhase += star.twinkleSpeed;\r\n        star.pulsePhase += 0.01;\r\n        \r\n        const twinkle = Math.sin(star.twinklePhase) * 0.4 + 0.6;\r\n        const pulse = Math.sin(star.pulsePhase) * 0.2 + 0.8;\r\n        const currentBrightness = star.brightness * twinkle * pulse;\r\n\r\n        // Star colors with realistic temperature mapping\r\n        let starColor, coreColor, glowColor;\r\n        switch(star.color) {\r\n          case 'red':\r\n            starColor = `255, 100, 80`;\r\n            coreColor = `255, 180, 150`;\r\n            glowColor = `255, 60, 40`;\r\n            break;\r\n          case 'blue':\r\n            starColor = `100, 150, 255`;\r\n            coreColor = `200, 220, 255`;\r\n            glowColor = `80, 120, 255`;\r\n            break;\r\n          case 'orange':\r\n            starColor = `255, 180, 80`;\r\n            coreColor = `255, 220, 180`;\r\n            glowColor = `255, 140, 60`;\r\n            break;\r\n          case 'yellow':\r\n            starColor = `255, 240, 150`;\r\n            coreColor = `255, 255, 220`;\r\n            glowColor = `255, 200, 100`;\r\n            break;\r\n          default:\r\n            starColor = `255, 255, 255`;\r\n            coreColor = `255, 255, 255`;\r\n            glowColor = `200, 220, 255`;\r\n        }\r\n\r\n        // Giant stars get corona effects\r\n        if (star.type === 'giant') {\r\n          const coronaGradient = ctx.createRadialGradient(\r\n            star.x, star.y, 0,\r\n            star.x, star.y, star.coronaSize\r\n          );\r\n          coronaGradient.addColorStop(0, `rgba(${glowColor}, ${currentBrightness * 0.1})`);\r\n          coronaGradient.addColorStop(0.7, `rgba(${glowColor}, ${currentBrightness * 0.05})`);\r\n          coronaGradient.addColorStop(1, `rgba(${glowColor}, 0)`);\r\n          \r\n          ctx.fillStyle = coronaGradient;\r\n          ctx.fillRect(star.x - star.coronaSize, star.y - star.coronaSize, \r\n                      star.coronaSize * 2, star.coronaSize * 2);\r\n        }\r\n\r\n        // Diffraction spikes for bright stars\r\n        if (star.radius > 1) {\r\n          ctx.strokeStyle = `rgba(${starColor}, ${currentBrightness * 0.6})`;\r\n          ctx.lineWidth = 0.8;\r\n          ctx.beginPath();\r\n          \r\n          // Main cross spikes\r\n          const spikeLength = star.radius * 8;\r\n          ctx.moveTo(star.x - spikeLength, star.y);\r\n          ctx.lineTo(star.x + spikeLength, star.y);\r\n          ctx.moveTo(star.x, star.y - spikeLength);\r\n          ctx.lineTo(star.x, star.y + spikeLength);\r\n          \r\n          // Diagonal spikes for giants\r\n          if (star.type === 'giant') {\r\n            const diagLength = spikeLength * 0.6;\r\n            ctx.moveTo(star.x - diagLength, star.y - diagLength);\r\n            ctx.lineTo(star.x + diagLength, star.y + diagLength);\r\n            ctx.moveTo(star.x - diagLength, star.y + diagLength);\r\n            ctx.lineTo(star.x + diagLength, star.y - diagLength);\r\n          }\r\n          ctx.stroke();\r\n        }\r\n\r\n        // Multi-layer star rendering\r\n        // Outer glow\r\n        ctx.shadowColor = `rgba(${glowColor}, ${currentBrightness})`;\r\n        ctx.shadowBlur = star.radius * 6;\r\n        ctx.fillStyle = `rgba(${starColor}, ${currentBrightness * 0.8})`;\r\n        ctx.beginPath();\r\n        ctx.arc(star.x, star.y, star.radius * 1.5, 0, Math.PI * 2);\r\n        ctx.fill();\r\n\r\n        // Core\r\n        ctx.shadowBlur = star.radius * 3;\r\n        ctx.fillStyle = `rgba(${coreColor}, ${currentBrightness})`;\r\n        ctx.beginPath();\r\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n\r\n        // Bright center\r\n        ctx.shadowBlur = 0;\r\n        ctx.fillStyle = `rgba(255, 255, 255, ${currentBrightness * 0.9})`;\r\n        ctx.beginPath();\r\n        ctx.arc(star.x, star.y, star.radius * 0.3, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      });\r\n\r\n      // ☄️ Draw spectacular comets\r\n      comets.forEach((comet, i) => {\r\n        const baseColor = comet.color === 'red' ? '255, 60, 40' : '100, 200, 255';\r\n        const coreColor = comet.color === 'red' ? '255, 120, 100' : '200, 240, 255';\r\n\r\n        comet.rotation += 0.1;\r\n\r\n        // Create coma (gas cloud around nucleus)\r\n        const comaGradient = ctx.createRadialGradient(\r\n          comet.x, comet.y, 0,\r\n          comet.x, comet.y, comet.size * 4\r\n        );\r\n        comaGradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity * 0.3})`);\r\n        comaGradient.addColorStop(0.5, `rgba(${baseColor}, ${comet.opacity * 0.1})`);\r\n        comaGradient.addColorStop(1, `rgba(${baseColor}, 0)`);\r\n        \r\n        ctx.fillStyle = comaGradient;\r\n        ctx.fillRect(comet.x - comet.size * 4, comet.y - comet.size * 4, \r\n                    comet.size * 8, comet.size * 8);\r\n\r\n        // Multiple tail types\r\n        const tailCount = 5;\r\n        for (let t = 0; t < tailCount; t++) {\r\n          const tailOffset = (t - 2) * 15;\r\n          const tailLength = comet.length * (1 - t * 0.15);\r\n          \r\n          // Ion tail (straight)\r\n          if (t === 0) {\r\n            const ionGradient = ctx.createLinearGradient(\r\n              comet.x, comet.y,\r\n              comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength\r\n            );\r\n            ionGradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity})`);\r\n            ionGradient.addColorStop(0.3, `rgba(${baseColor}, ${comet.opacity * 0.8})`);\r\n            ionGradient.addColorStop(1, `rgba(${baseColor}, 0)`);\r\n            \r\n            ctx.strokeStyle = ionGradient;\r\n            ctx.lineWidth = 6;\r\n            ctx.beginPath();\r\n            ctx.moveTo(comet.x, comet.y);\r\n            ctx.lineTo(comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength);\r\n            ctx.stroke();\r\n          }\r\n          \r\n          // Dust tails (curved)\r\n          const curvature = Math.sin(comet.rotation + t) * 0.3;\r\n          const dustGradient = ctx.createLinearGradient(\r\n            comet.x, comet.y + tailOffset,\r\n            comet.x - comet.vx * tailLength, comet.y - comet.vy * tailLength + tailOffset + curvature * 50\r\n          );\r\n          dustGradient.addColorStop(0, `rgba(${baseColor}, ${comet.opacity * 0.7})`);\r\n          dustGradient.addColorStop(0.5, `rgba(${baseColor}, ${comet.opacity * 0.4})`);\r\n          dustGradient.addColorStop(1, `rgba(${baseColor}, 0)`);\r\n          \r\n          ctx.strokeStyle = dustGradient;\r\n          ctx.lineWidth = 4 - t * 0.5;\r\n          ctx.beginPath();\r\n          ctx.moveTo(comet.x, comet.y + tailOffset);\r\n          ctx.quadraticCurveTo(\r\n            comet.x - comet.vx * tailLength * 0.5, \r\n            comet.y - comet.vy * tailLength * 0.5 + tailOffset + curvature * 25,\r\n            comet.x - comet.vx * tailLength, \r\n            comet.y - comet.vy * tailLength + tailOffset + curvature * 50\r\n          );\r\n          ctx.stroke();\r\n        }\r\n\r\n        // Spiral particle jets\r\n        for (let j = 0; j < 8; j++) {\r\n          const angle = comet.rotation + (j * Math.PI / 4);\r\n          const jetLength = 30;\r\n          const jetX = comet.x + Math.cos(angle) * jetLength;\r\n          const jetY = comet.y + Math.sin(angle) * jetLength;\r\n          \r\n          if (Math.random() < 0.4) {\r\n            comet.spiralParticles.push({\r\n              x: jetX,\r\n              y: jetY,\r\n              vx: Math.cos(angle) * 2 + comet.vx * 0.5,\r\n              vy: Math.sin(angle) * 2 + comet.vy * 0.5,\r\n              life: 1,\r\n              decay: 0.02,\r\n              size: Math.random() * 2 + 1\r\n            });\r\n          }\r\n        }\r\n\r\n        // Enhanced particle systems\r\n        if (Math.random() < 0.7) {\r\n          for (let p = 0; p < 3; p++) {\r\n            comet.particles.push({\r\n              x: comet.x + (Math.random() - 0.5) * 20,\r\n              y: comet.y + (Math.random() - 0.5) * 20,\r\n              vx: (Math.random() - 0.5) * 4 - comet.vx * 0.3,\r\n              vy: (Math.random() - 0.5) * 4 - comet.vy * 0.3,\r\n              life: 1,\r\n              decay: Math.random() * 0.03 + 0.01,\r\n              size: Math.random() * 3 + 1\r\n            });\r\n          }\r\n        }\r\n\r\n        // Sparkle effects\r\n        if (Math.random() < 0.5) {\r\n          comet.sparkles.push({\r\n            x: comet.x + (Math.random() - 0.5) * 15,\r\n            y: comet.y + (Math.random() - 0.5) * 15,\r\n            life: 1,\r\n            decay: 0.1,\r\n            brightness: Math.random()\r\n          });\r\n        }\r\n\r\n        // Draw all particles\r\n        [...comet.particles, ...comet.spiralParticles].forEach((particle, pi) => {\r\n          particle.x += particle.vx;\r\n          particle.y += particle.vy;\r\n          particle.life -= particle.decay;\r\n          particle.vx *= 0.99;\r\n          particle.vy *= 0.99;\r\n          \r\n          if (particle.life > 0) {\r\n            ctx.shadowColor = `rgba(${baseColor}, ${particle.life})`;\r\n            ctx.shadowBlur = particle.size * 2;\r\n            ctx.fillStyle = `rgba(${baseColor}, ${particle.life * comet.opacity})`;\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          }\r\n        });\r\n\r\n        // Draw sparkles\r\n        comet.sparkles.forEach((sparkle, si) => {\r\n          sparkle.life -= sparkle.decay;\r\n          if (sparkle.life > 0) {\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${sparkle.life * sparkle.brightness})`;\r\n            ctx.lineWidth = 2;\r\n            ctx.beginPath();\r\n            ctx.moveTo(sparkle.x - 5, sparkle.y);\r\n            ctx.lineTo(sparkle.x + 5, sparkle.y);\r\n            ctx.moveTo(sparkle.x, sparkle.y - 5);\r\n            ctx.lineTo(sparkle.x, sparkle.y + 5);\r\n            ctx.stroke();\r\n          }\r\n        });\r\n\r\n        // Filter out dead particles\r\n        comet.particles = comet.particles.filter(p => p.life > 0);\r\n        comet.spiralParticles = comet.spiralParticles.filter(p => p.life > 0);\r\n        comet.sparkles = comet.sparkles.filter(s => s.life > 0);\r\n\r\n        // Ultra-detailed nucleus\r\n        // Outer atmosphere\r\n        ctx.shadowColor = `rgba(${baseColor}, ${comet.opacity})`;\r\n        ctx.shadowBlur = 30;\r\n        ctx.fillStyle = `rgba(${baseColor}, ${comet.opacity * 0.3})`;\r\n        ctx.beginPath();\r\n        ctx.arc(comet.x, comet.y, comet.size * 2, 0, Math.PI * 2);\r\n        ctx.fill();\r\n\r\n        // Middle layer\r\n        ctx.shadowBlur = 20;\r\n        ctx.fillStyle = `rgba(${coreColor}, ${comet.opacity * 0.8})`;\r\n        ctx.beginPath();\r\n        ctx.arc(comet.x, comet.y, comet.size * 1.2, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        // Core\r\n        ctx.shadowBlur = 15;\r\n        ctx.fillStyle = `rgba(255, 255, 255, ${comet.opacity})`;\r\n        ctx.beginPath();\r\n        ctx.arc(comet.x, comet.y, comet.size * 0.6, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        // Bright center\r\n        ctx.shadowBlur = 8;\r\n        ctx.fillStyle = `rgba(255, 255, 255, ${comet.opacity})`;\r\n        ctx.beginPath();\r\n        ctx.arc(comet.x, comet.y, comet.size * 0.3, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        ctx.shadowBlur = 0;\r\n\r\n        comet.x += comet.vx;\r\n        comet.y += comet.vy;\r\n\r\n        if (comet.x > canvas.width * 0.8) {\r\n          comet.opacity -= 0.008;\r\n        }\r\n\r\n        if (comet.opacity <= 0 || comet.x > canvas.width + 200) {\r\n          comets.splice(i, 1);\r\n        }\r\n      });\r\n\r\n      // ⭐ Draw shooting stars\r\n      shootingStars.forEach((star, i) => {\r\n        star.trail.push({ x: star.x, y: star.y, life: 1 });\r\n        if (star.trail.length > 15) star.trail.shift();\r\n\r\n        // Draw trail\r\n        star.trail.forEach((point, pi) => {\r\n          point.life -= 0.1;\r\n          if (point.life > 0) {\r\n            const trailColor = star.color === 'gold' ? '255, 215, 0' : '255, 255, 255';\r\n            ctx.shadowColor = `rgba(${trailColor}, ${point.life})`;\r\n            ctx.shadowBlur = 5;\r\n            ctx.fillStyle = `rgba(${trailColor}, ${point.life * 0.8})`;\r\n            ctx.beginPath();\r\n            ctx.arc(point.x, point.y, 2 * point.life, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          }\r\n        });\r\n\r\n        // Draw shooting star\r\n        const shootingColor = star.color === 'gold' ? '255, 215, 0' : '255, 255, 255';\r\n        ctx.shadowColor = `rgba(${shootingColor}, ${star.life})`;\r\n        ctx.shadowBlur = 15;\r\n        ctx.fillStyle = `rgba(${shootingColor}, ${star.life})`;\r\n        ctx.beginPath();\r\n        ctx.arc(star.x, star.y, 3, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.shadowBlur = 0;\r\n\r\n        star.x += star.vx;\r\n        star.y += star.vy;\r\n        star.life -= 0.02;\r\n\r\n        if (star.life <= 0 || star.x < -50 || star.x > canvas.width + 50) {\r\n          shootingStars.splice(i, 1);\r\n        }\r\n      });\r\n\r\n      spawnShootingStar();\r\n      requestAnimationFrame(draw);\r\n    };\r\n\r\n    resize();\r\n    initStars();\r\n    draw();\r\n\r\n    const cometInterval = setInterval(spawnComet, 3000);\r\n\r\n    window.addEventListener('resize', () => {\r\n      resize();\r\n      initStars();\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', resize);\r\n      clearInterval(cometInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full z-0\"\r\n      style={{ background: 'transparent' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StarsBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}